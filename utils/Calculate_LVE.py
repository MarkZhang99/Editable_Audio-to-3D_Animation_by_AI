import numpy as np
from scipy.spatial import procrustes

def rigid_align_frame(pred_vertices, gt_vertices):
    # 将预测顶点对齐到真实顶点
    _, aligned_pred, _ = procrustes(gt_vertices, pred_vertices)
    return aligned_pred

def compute_lve_frame_vectorized(pred_vertices, gt_vertices, lip_indices, mode='max'):
    """
    计算单帧中嘴部区域的顶点误差，使用向量化方法。
    
    参数：
      pred_vertices: (N, 3) 的预测顶点数组
      gt_vertices:   (N, 3) 的真实顶点数组
      lip_indices:   数组或列表，包含嘴部区域顶点的索引
      mode:          'max' 返回该帧中最大的误差，'mean' 返回平均误差
      
    返回：
      当前帧的 LVE
    """
    lip_indices = np.array(lip_indices)
    # 筛选有效索引
    N = pred_vertices.shape[0]
    valid_indices = lip_indices[lip_indices < N]
    if len(valid_indices) == 0:
        raise ValueError("没有有效的嘴部区域索引！")
    
    pred_lips = pred_vertices[valid_indices]
    gt_lips = gt_vertices[valid_indices]
    # 计算欧氏距离：每个顶点的误差
    errors = np.linalg.norm(pred_lips - gt_lips, axis=1)
    if mode == 'max':
        return np.max(errors)
    elif mode == 'mean':
        return np.mean(errors)
    else:
        raise ValueError("mode 参数必须是 'max' 或 'mean'")

def compute_average_lve_vectorized(pred_all, gt_all, lip_indices, mode='max'):
    """
    对整个视频序列计算平均的 LVE，使用向量化方法。
    
    参数：
      pred_all: (F, N, 3) 预测顶点数组，F 为帧数
      gt_all:   (F, N, 3) 真实顶点数组
      lip_indices: 嘴部区域顶点的索引列表或数组
      mode: 'max' 或 'mean'
      
    返回：
      整个视频序列的平均 LVE
    """
    # 确保 lip_indices 为 numpy 数组
    lip_indices = np.array(lip_indices)
    F, N, _ = pred_all.shape
    # 过滤掉超出范围的索引
    valid_indices = lip_indices[lip_indices < N]
    if len(valid_indices) == 0:
        raise ValueError("没有有效的嘴部区域索引！")
    
    # 计算所有帧中嘴部区域的顶点误差，形状为 (F, len(valid_indices))
    differences = np.linalg.norm(pred_all[:, valid_indices, :] - gt_all[:, valid_indices, :], axis=2)
    
    if mode == 'max':
        frame_errors = np.max(differences, axis=1)
    elif mode == 'mean':
        frame_errors = np.mean(differences, axis=1)
    else:
        raise ValueError("mode 参数必须是 'max' 或 'mean'")
    
    return np.mean(frame_errors)

# 示例使用：
# 加载预测和 ground truth 的 3D 顶点数据
pred_vertices_all = np.load("/transfer/emotalk/EmoTalk_release-main/result/3d_result/01-01-08-02-02-02-01.npy")
gt_vertices_all = np.load("../3D-ETF/LVE_test/3d_result/01-01-08-02-02-02-01.npy")
print("Predicted vertices shape:", pred_vertices_all.shape)
print("Ground truth vertices shape:", gt_vertices_all.shape)

# 定义嘴部区域顶点索引（请根据你的模型实际情况调整）
lip_indices = [9, 10, 11, 18, 25, 26, 34, 35, 36, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 120, 127, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 148, 151, 153, 155, 419, 420, 433, 434, 435, 436, 470, 485, 486, 487, 488, 489, 490, 527, 528, 529, 530, 531, 532, 537, 538, 544, 545, 549, 553, 554, 555, 560, 563, 564, 569, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 588, 589, 591, 597, 598, 599, 601, 602, 608, 609, 610, 611, 614, 637, 638, 639, 640, 641, 642, 644, 648, 693, 694, 695, 697, 751, 754, 755, 756, 757, 758, 765, 766, 767, 910, 913, 914, 929, 1093, 1095, 1096, 1097, 1110, 1126, 1127, 1128, 1129, 1131, 1155, 1156, 1157, 1158, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1182, 1231, 1232, 1236, 1237, 1380, 1381, 1388, 1463, 1464, 1465, 1487, 1645, 1646, 1647, 1660, 1661, 1662, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867, 1868, 1869, 1870, 1871, 1872, 1873, 1874, 1875, 1876, 1877, 1878, 1879, 1880, 1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2110, 2111, 2164, 2236, 2255, 2256, 2257, 2260, 2263, 2264, 2265, 2443, 2444, 2445, 2446, 2447, 2448, 2449, 2450, 2451, 2452, 2453, 2454, 2455, 2456, 2457, 2458, 2459, 2465, 2466, 2467, 2468, 2469, 2470, 2471, 2472, 2473, 2474, 2475, 2476, 2477, 2478, 2479, 2480, 2481, 2482, 2483, 2484, 2485, 2486, 2487, 2488, 2489, 2490, 2491, 2492, 2493, 2494, 2495, 2496, 2497, 2498, 2499, 2500, 2501, 2502, 2503, 2504, 2505, 2506, 2507, 2508, 2509, 2510, 2511, 2512, 2513, 2514, 2515, 2516, 2517, 2518, 2519, 2520, 2521, 2522, 2523, 2524, 2525, 2526, 2527, 2528, 2529, 2530, 2531, 2532, 2533, 2534, 2535, 2536, 2537, 2538, 2539, 2540, 2541, 2542, 2543, 2544, 2545, 2546, 2547, 2548, 2561, 2562, 2563, 2564, 2565, 2566, 2567, 2578, 2579, 2592, 2593, 2594, 2595, 2596, 2597, 2598, 2601, 2606, 2607, 2608, 2609, 2610, 2611, 2612, 2613, 2614, 2615, 2616, 2617, 2618, 2619, 2626, 2627, 2628, 2629, 2630, 2631, 2632, 2645, 2646, 2647, 2648, 2649, 2650, 2651, 2652, 2653, 2654, 2655, 2656, 2657, 2658, 2659, 2660, 2661, 2662, 2670, 2671, 2672, 2673, 2674, 2675, 2676, 2677, 2678, 2679, 2680, 2681, 2682, 2683, 2684, 2685, 2686, 2696, 2697, 2698, 2699, 2700, 2701, 2702, 2703, 2704, 2705, 2706, 2820, 2821, 2822, 2922, 2923, 2924, 2925, 2926, 2927, 2928, 2929, 2930, 2931, 2932, 2933, 2934, 2935, 2936, 2937, 2938, 2939, 2940, 2941, 2942, 2943, 2944, 2945, 2946, 2947, 2948, 2949, 2950, 2951, 2952, 2953, 2954, 2955, 2956, 2957, 2958, 2959, 2960, 2961, 2962, 2963, 2964, 2965, 2966, 2967, 2968, 2969, 2970, 2971, 2972, 2973, 2974, 2975, 2976, 2977, 2978, 2979, 2980, 2981, 2982, 2983, 2984, 2985, 2986, 2987, 2988, 2989, 2990, 2991, 2992, 2993, 2996, 2997, 2998, 2999, 3000, 3001, 3002, 3003, 3004, 3005, 3006, 3007, 3008, 3009, 3011, 3012, 3013, 3014, 3015, 3016, 3017, 3018, 3019, 3020, 3021, 3022, 3023, 3024, 3025, 3026, 3027, 3028, 3029, 3030, 3031, 3032, 3033, 3034, 3035, 3036, 3037, 3038, 3039, 3040, 3041, 3042, 3043, 3044, 3045, 3046, 3047, 3048, 3049, 3050, 3051, 3052, 3053, 3054, 3055, 3056, 3057, 3058, 3059, 3060, 3061, 3062, 3063, 3064, 3065, 3066, 3067, 3068, 3069, 3070, 3071, 3072, 3073, 3074, 3075, 3076, 3077, 3078, 3079, 3080, 3081, 3082, 3083, 3084, 3085, 3086, 3087, 3088, 3089, 3090, 3091, 3092, 3093, 3094, 3095, 3096, 3097, 3098, 3099, 3100]
